https://www.baeldung.com/java-algorithm-complexity

We often hear the performance of an algorithm described using Big O Notation.
The study of the performance of algorithms – or algorithmic complexity – falls into the field of algorithm analysis. 
Algorithm analysis answers the question of how many resources, such as disk space or time, an algorithm consumes

Constant Time Algorithms – O(1) - Constant time algorithms are (asymptotically) the quickest
///////////////////////////////
int n = 1000;
System.out.println("Hey - your input is: " + n);
Clearly, it doesn’t matter what n is, above.
This piece of code takes a constant amount of time to run. It’s not dependent on the size of n.
int n = 1000;
System.out.println("Hey - your input is: " + n);
System.out.println("Hmm.. I'm doing more stuff with: " + n);
System.out.println("And more: " + n);
The above example is also constant time. 
Even if it takes 3 times as long to run, it doesn’t depend on the size of the input, n.
We denote constant time algorithms as follows: O(1). Note that O(2), O(3) or even O(1000) would mean the same thing.
We don’t care about exactly how long it takes to run, only that it takes constant time.

Logarithmic Time Algorithms – O(log n) -  Logarithmic time is the next quickest. Unfortunately, they’re a bit trickier to imagine.
//////////////////////////////////////////////////////////
for (int i = 1; i < n; i = i * 2){
    System.out.println("Hey - I'm busy looking at: " + i);
}
If n is 8, the output will be the following:

1
2
3

Hey - I'm busy looking at: 1
Hey - I'm busy looking at: 2
Hey - I'm busy looking at: 4
Our simple algorithm ran log(8) = 3 times

Linear Time Algorithms – O(n) - we get the next fastest class: linear time algorithms.
///////////////////////////////////////////////////////
If we say something grows linearly, we mean that it grows directly proportional to the size of its inputs.
or (int i = 0; i < n; i++) {
    System.out.println("Hey - I'm busy looking at: " + i);
    System.out.println("Hmm.. Let's have another look at: " + i);
    System.out.println("And another: " + i);
}
The runtime would still be linear in the size of its input, n. We denote linear algorithms as follows: O(n).
As with the constant time algorithms, we don’t care about the specifics of the runtime. 
O(2n+1) is the same as O(n), as Big O Notation concerns itself with growth for input sizes.

N Log N Time Algorithms – O(n log n)
////////////////////////////////////



