https://www.youtube.com/watch?v=NU_1StN5Tkk

Design Patterns
...............


   Creational(creation of objects)      Structural(Relationship of objects)           Behavioural(Communication between objects)
   ..........                           ..........                                      ...........

1. SingleTon                        1. Adapter Pattern                                1. Chain of Responibility
2. Factory                          2. Bridge Pattern                                 2. Command
3. Abstract Factory                 3. Composite Pattern                              3. Interpretor
4. Builder                          4. Decorator Pattern                              4. Interator
5. Prototype Pattern                5. Facade Pattern                                 5. Observer
6. Object Pool pattern              6. Flyweight                                      6. State
                                    7. Proxy                                          7. Strategy
                                                                                      8. Template
                                                                                      9. Mediator
                                                                                      10.Memento

Creational
..........

1 ) Single Ton Design Pattern
..............................
https://www.callicoder.com/java-singleton-design-pattern-example/

Singleton design pattern is used when you want to have only one instance of a given class. 
It is a creational design pattern wherein we deal with the creation of objects.

How do you ensure that a class has only one instance? 
Well, there are several ways of doing this in Java. But all of them are based on the following basic ideas:

1)Declare a private constructor to prevent others from instantiating the class.

2)Create the instance of the class either during class loading in a static field/block,
  or on-demand in a static method that first checks whether 
  the instance exists or not and creates a new one only if it doesn’t exist.

Multiple types of Single Ton
...........................

a) Eagerly Initialized Singleton
   .............................
   
   This is the simplest approach wherein the instance of the class is created at the time of class loading
   The disadvantage of this approach is that the instance is created irrespective of whether it is accessed or not. This is fine if the object is simple and does not hold any system resources. 
   But can have performance implications if it allocates a large amount of system resources and remains unused.   

b) Eagerly Initialized Static Block Singleton   
   ...........................................
   You can also create the one-off instance of the class in a static block. 
   This works because the static block is executed only once at the time of class loading.
   The advantage with static block initialization is that you can write your initialization logic
   or handle exceptions in the static block.

   
c) LazyInitializedSigleTon
   .......................
   
   Lazy initialization means delaying the initialization of something until the first time it is needed.
   Notice the use of synchronized keyword in the getInstance() method.
    This is needed to prevent race conditions in multi-threaded environments.     
   
d) Lazily Initialized Double-Checked Locking Singleton
   ....................................................
   
   The synchronized keyword added to the getInstance() method prevents race conditions, but it also incurs some performance penalty.
 
   Following is an optimized version of the lazily initialized singleton where - instead of making the entire method synchronized, 
   we create a synchronized block and wrap only the instantiation part inside the synchronized block 
   
......................................................................................................................
 
2. Factory Design Pattern
   ......................
   
    for creating instances for your classes. Factory, as the name suggests, 
    is a place to create some different products which are somehow similar in features yet divided into categories. 
 
    Factory pattern introduces loose coupling between classes which is the most important principle one 
    should consider and apply while designing the application architecture. 
    Loose coupling can be introduced in application 
    architecture by programming against abstract entities rather than concrete implementations. 
 
    Let subclasses do what object to create
 
 
 3. Abstract Factory (factory for factories)
    ................
    
    
 4. Builder Design pattern
    ......................
    
     Builder pattern aims to “Separate the construction of a complex object from its representation
     so that the same construction process can create different representations.” 
     It is used to construct a complex object step by step and the final step will return the object. 
     The process of constructing an object 
     should be generic so that it can be used to create different representations of the same object.
       
     https://www.geeksforgeeks.org/builder-design-pattern/
     
 5. Prototype Pattern
    ..................       
    
    Prototype allows us to hide the complexity of making new instances from the client. 
    The concept is to copy an existing object rather than creating a new instance from scratch, 
    
 
6. Object Pool Design Pattern
   ...........................
   
   Object pool pattern is a software creational design pattern which is used in situations where the cost of initializing a class instance is very high.
   Basically, an Object pool is a container which contains some amount of objects. So, when an object is taken from the pool, it is not available in the pool until it is put back.
   Objects in the pool have a lifecycle:
   
   Creation
   Validation
   Destroy.
 
#####################################################################################################################
 
Structural Design Pattern
.........................         
   
  1. Adapter Pattern ex; Toy duck and sparrow 
     ...............
     
     In design, adapters are used when we have a class (Client) expecting some type of object 
     and we have an object (Adaptee) offering the same features but exposing a different interface.
      
      
  2.    
   
   
   
   
 3. FlyWeight DesignPattern
    .......................
    
    Flyweight pattern is one of the structural design patterns as this pattern provides ways to decrease object count thus improving application required objects structure. 
    Flyweight pattern is used when we need to create a large number of similar objects (say 105).
    One important feature of flyweight objects is that they are immutable. 
    This means that they cannot be modified once they have been constructed.
      
      
 4. Facade Design Pattern
    .....................
    the Facade Design Pattern. It hides the complexities of the system and provides an interface to the client from where the client can access the system.
    In Java, the interface JDBC can be called a facade because, we as users or clients create connection using the “java.sql.Connection” interface, the implementation of which we are not concerned about. The implementation is left to the vendor of driver.
         
   
 5. Factory Design Pattern
 
 
 6. Command pattern
 
 7. Abstract Factory
 
 8. Decorator Pattern
 
 9. Strategy Design Pattern
 
 10. Observer Design pattern
 
 11. State Design pattern
 
 12. Adapter Pattern
 
 
 
 
 
 
    
   
   


   
   
  