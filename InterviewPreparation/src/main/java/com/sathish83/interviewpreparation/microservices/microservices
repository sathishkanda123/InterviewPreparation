ACID PROPERTIES
...............

Atomicity means either all successful or none.

Consistency ensures bringing the database from one consistent state to another consistent state.

Isolation ensures that transaction is isolated from other transaction.

Durability means once a transaction has been committed, it will remain so, even in the event of errors, power loss etc.


Spring Transaction 
..................
https://www.baeldung.com/transaction-configuration-with-jpa-and-spring
https://dzone.com/articles/spring-transaction-management

Spring supports two types of transaction management:

Programmatic transaction management: This means that you have to manage the transaction with the help of programming.
  That gives you extreme flexibility, but it is difficult to maintain.

like - 

A)
	
EntityManagerFactory factory = Persistence.createEntityManagerFactory("PERSISTENCE_UNIT_NAME");                                       EntityManager entityManager = entityManagerFactory.createEntityManager();                   
Transaction transaction = entityManager.getTransaction()                  
try                                       
{  
   transaction.begin();                   
   someBusinessCode();                    
   transaction.commit();  
}                  
catch(Exception ex)                   
{                     
   transaction.rollback();  
   throw ex;                  
}

The Spring Framework provides two means of programmatic transaction management.
//////////////////////////////////////////////////////////////////////////////
a. Using the TransactionTemplate
   private final TransactionTemplate transactionTemplate;
   
b. Using a PlatformTransactionManager implementation directly
     private PlatformTransactionManager transactionManager;

Declarative Transaction (Usually used almost in all scenarios of any web application)
....................................................................................

<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"/>
<tx:annotation-driven transaction-manager="txManager"/>

@EnableTransactionManagement





	

Declarative transaction management: This means you separate transaction management from the business code. 
 You only use annotations or XML-based configuration to manage the transactions.



















import org.springframework.transaction.annotation.Transactional;

 @Transactional
    public void book(String... persons) {
        for (String person : persons) {
            logger.info("Booking " + person + " in a seat...");
            jdbcTemplate.update("insert into BOOKINGS(FIRST_NAME) values (?)", person);
        }
    }
    
@Transactional, meaning that any failure causes the entire operation to roll back to its previous state, 
and to re-throw the original exception. 
This means that none of the people will be added to BOOKINGS if one person fails to be added.



Ways to handle transactions in Microservices
    Avoiding transactions across Microservices.
    Two-Phase Commit Protocol.
    XA Standard.
    REST-AT Standard Draft. 
    Eventual Consistency and Compensation.


https://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html
Spring Cloud
.............
Spring Cloud is a framework for building robust cloud applications. 
The framework facilitates the development of applications 
by providing solutions to many of the common problems faced when moving to a distributed environment.
The decomposed nature of the application allows developers to focus on one problem at a time. 
Improvements can be introduced without impacting other parts of a system.





Spring Cloud Config
...................
https://www.baeldung.com/spring-cloud-configuration

https://www.javacodegeeks.com/2017/08/spring-cloud-tutorials-introduction-spring-cloud-config-server.html

When developing a cloud application, one issue is maintaining and distributing 
configuration to our services. We really don’t want to spend time configuring each environment 
before scaling our service horizontally or risk security breaches by baking our configuration into our application.

To solve this, we will consolidate all of our configuration into a single 
Git repository and connect that to one application that manages a configuration 
for all our applications. We are going to be setting up a very simple implementation.


Euerka Services
...............

Client-side service discovery allows services to find and communicate with each other without hard-coding hostname and port. 
The only ‘fixed point’ in such an architecture consists of a service registry with which each service has to register.

A drawback is that all clients must implement a certain logic to interact with this fixed point. 
This assumes an additional network round trip before the actual request.

Eureka Server
............

Implementing a Eureka Server for service registry is as easy as:

adding spring-cloud-starter-netflix-eureka-server to the dependencies
enable the Eureka Server in a @SpringBootApplication by annotating it with @EnableEurekaServer
configure some properties











 Microservices Design Pattern
 ..........................
 
 ApiGateway
 .........
   
   An API Gateway is a server that is the single entry point into the system. 
   It is similar to the Facade pattern from object-oriented design.
   The API Gateway encapsulates the internal system architecture and provides an API that is tailored to each client. It might have other responsibilities such as authentication, 
   monitoring, load balancing, caching, request shaping and management, and static response handling.
   
   The API Gateway is responsible for request routing, composition, and protocol translation. 
   All requests from clients first go through the API Gateway. It then routes requests to the appropriate microservice. 
   The API Gateway will often handle a request by invoking multiple microservices and aggregating the results.
   It can translate between web protocols such as HTTP and WebSockets and web unfriendly protocols that are used internally.
   
   Implementing the API Gateway pattern is really simple with Spring Cloud and Zuul. 
   Zuul comes from the Netflix family of microservice products for which 
   Spring Cloud provides many enhancements for developers using Spring. 
   Unlike many enterprise API gateway products, Zuul provides complete control for the 
   developers to configure or program based on specific requirements.

  The Zuul proxy internally uses the Eureka server for service discovery, 
  and Ribbon for load balancing between service instances. 
  The Zuul proxy is also capable of routing, monitoring, managing resiliency, security, and so on. 
  In simple terms, you can consider Zuul a reverse proxy. 
  However, as demonstrated in the referenced example, you can also build a sophisticated edge service that can 
  modify the results of the proxied services by overriding them at the API layer.

  Zuul gives us a lot of insight, flexibility, and resiliency, in part by making use of other Netflix OSS components:

  Hystrix is used to wrap calls to our origins, which allows us to shed and prioritize traffic when issues occur

  Ribbon is our client for all outbound requests from Zuul, which provides detailed information into network performance and errors, as well as handles software load balancing for even load distribution

  Turbine aggregates fine­grained metrics in real­time so that we can quickly observe and react to problems

  Archaius handles configuration and gives the ability to dynamically change properties

  Zipkin is very efficient tool for distributed tracing in microservices ecosystem
  
// Netflix feign client












