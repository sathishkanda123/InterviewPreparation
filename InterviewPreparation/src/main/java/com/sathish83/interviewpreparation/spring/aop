https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop

AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. 
The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. 

Spring AOP currently supports only method execution join points (advising the execution of methods on Spring beans).
Field interception is not implemented, although support for field interception could be added without breaking the core Spring AOP APIs. 
If you need to advise field access and update join points, consider a language such as AspectJ.


Let us begin by defining some central AOP concepts and terminology
..................................................................

Aspect -- A modularization of a concern that cuts across multiple classes. 
          Transaction management is a good example of a crosscutting concern in enterprise Java applications. 
          In Spring AOP, aspects are implemented by using regular classes (the schema-based approach-xml)
          or regular classes annotated with the @Aspect annotation (the @AspectJ style).
          @Aspect
          public class NotVeryUsefulAspect {

          }  
            
                    
Joinpoint -- A point during the execution of a program, such as the execution of a method or the handling of an exception.
             In Spring AOP, a join point always represents a method execution.          


Advice  --- Action taken by an aspect at a particular join point. Different types of advice include “around”, “before” and “after” 
            Many AOP frameworks, including Spring, model an advice as an interceptor and maintain a chain of interceptors around the join point.
            
            Spring AOP includes the following types of advice:
            ..................................................
            
            Before advice: Advice that runs before a join point but that does not have the ability to prevent execution
                           flow proceeding to the join point (unless it throws an exception).
            
            After returning advice : Advice to be run after a join point completes normally (for example, if a method returns without throwing an exception).
            
            After throwing advice - Advice to be executed if a method exits by throwing an exception.
            
            After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).
            
            Around advice : - Advice that surrounds a join point such as a method invocation.
                              This is the most powerful kind of advice. 
                              Around advice can perform custom behavior before and after the method invocation. 
                              It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by
                              returning its own return value or throwing an exception.
            
            
            
            
Pointcut -- A predicate that matches join points. Advice is associated with a pointcut expression and runs at 
            any join point matched by the pointcut (for example, the execution of a method with a certain name).
            @Pointcut("execution(* transfer(..))")// the pointcut expression
            private void anyOldTransfer() {}                       
            
Target object -- An object being advised by one or more aspects. Also referred to as the “advised object”. Since Spring AOP is implemented by using runtime proxies, this object is always a proxied object.    

AOP proxy -- An object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy is a JDK dynamic proxy or a CGLIB proxy.

Weaving -- linking aspects with other application types or objects to create an advised object. 
           This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. 
           Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.         
            