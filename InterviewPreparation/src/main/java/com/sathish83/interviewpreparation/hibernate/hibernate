https://thoughts-on-java.org/tutorials/
.......................................

Why we use Hibernate or JPA
..........................
The Java Persistence API (JPA) is a Java application programming interface specification 
that describes the management of relational data in applications using Java Platform

1.Developer Productivity
  ........................

Developer productivity is probably the most often referenced advantage of JPA and any of its implementations. 
The main reason for that is that you have to define the mapping between the database tables and your
domain model only once to use it for all write and most of your read operations.
On top of that, you get a lot of additional features that you otherwise would need to implement yourself, 
like primary key generation, concurrency management, and different performance optimizations.

2. Database Independent
   ....................
   if you’re using JPA. It provides a database independent abstraction on top of SQL. 
   As long as you’re not using any native queries, you don’t have to worry about database portability. Your JPA implementation adapts the generated SQL statements in each API call or
   JPQL query to the specific database dialect and handles the different database-specific data types.
   
3. Type and Parameter Handling
   ...........................
   Because JDBC and Java data types do not line up perfectly, 
   you’d have to find the right combinations and make sure to provide them as query parameters.
   The best way to avoid these issues and to be able to focus on the business logic is to use a framework or specification,
   like JPA, that handles these things automatically.
   
4. Avoid Unnecessary Queries
   ...........................
   The basic idea is to delay all write operations as long as possible so that multiple update statements 
   can be combined into one.Your JPA implementation, therefore, stores all entities that were used within one transaction in the first level cache.
     
5. Caching
   .......   
   Caching is another performance tuning feature that you get almost for free if you use JPA. I already explained how the 1st level cache is utilized for the write-behind optimization. But that’s neither the only cache nor the only way to benefit from it. JPA defines 2 different kinds of caches:
   The first-level cache, which contains all entities used within a transaction.
   The second-level cache, which stores the entities in a session independent way.
   

Getting start with Hibernate
.............................
Hibernate is a very popular implementation of the Java Persistence API (JPA) standard. 
It acts as an additional layer on top of JDBC and enables you to implement a database-independent persistence layer. 
Hibernate provides an object-relational mapping implementation that maps your database 
records to Java objects and generates the required SQL statements to replicate all operations to the database.

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.2.12.Final(Latest Version)</version>
</dependency>


The easiest way to configure Hibernate is to add a persistence.xml file to the META-INF directory.
.................................................................................................
<persistence-unit name="my-persistence-unit">
        <description>Hibernate Tips</description>
        <exclude-unlisted-classes>false</exclude-unlisted-classes>
<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQL94Dialect" />
            <property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost:5432/recipes" />
            <property name="javax.persistence.jdbc.user" value="postgres" />
            <property name="javax.persistence.jdbc.password" value="postgres" />


I first define a persistence unit with the name my-persistence-unit.
It defines a set of entities which represent the data contained in a data store and will be managed by an EntityManager.

Entity Manager
..............
https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html
An EntityManager instance is associated with a persistence context. 
A persistence context is a set of entity instances in which for any persistent entity identity
there is a unique entity instance. Within the persistence context, the entity instances and their lifecycle are managed.
The EntityManager API is used to create and remove persistent entity instances, to find entities by their primary key, and to query over entities.
The set of entities that can be managed by a given EntityManager instance is defined by a persistence unit. 
A persistence unit defines the set of all classes that are related or grouped by the application, 
and which must be colocated in their mapping to a single database.

EntityManagerFactory emf = Persistence.createEntityManagerFactory("my-persistence-unit");
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

You don’t need to start the transaction after you’ve created your EntityManager. But please be aware, 
that Hibernate will start and commit a transaction for each database operation if there is no active transaction.

there are two types of EntityManager – Container Managed and Application Managed.

 Container Managed =-- the container is in charge of beginning, committing, or rolling back the transaction.
 ..................
  @PersistenceContext
  EntityManager entityManager;

Application Managed
...................

EntityManagerFactory emf = Persistence.createEntityManagerFactory("com.baeldung.movie_catalog");

public static EntityManager getEntityManager() {
    return emf.createEntityManager();
}











Date and Calender column in Hibernate
.....................................
One of the disadvantages of java.util.Date and java.util.Calendar is, 
that they always model a date with time information. 
But that’s quite often not what you want to persist in your database. 
In a lot of cases, you just want to store the date without any time or a time without a date.

The classes of Java 8’s Date and Time API fix this issue. JPA and Hibernate support them as basic types.
If you have the choice, you should use this new API. It provides a lot of benefits,
  and the easier attribute mapping is just one of them.



Persist a New Entity
....................
You can persist a new entity to a new database record by 
instantiating an entity object and calling the persist method on the EntityManager.

Author a = new Author();
a.setFirstName("Thorben");
em.persist(a);

Update an Existing Entity
........................
Updating an existing entity is even more comfortable. 
You just need to get an entity from the database and change any of its attributes. 
Before you execute the next query or when you commit the transaction,
Hibernate will perform a dirty check on all managed entities to identify any changes. 
It then generates and executes the required SQL UPDATE statements.

Author a = em.find(Author.class, 1L);
a.setFirstName("Thorben");

Remove an Existing Entity
.........................
And you can remove an entity by calling the remove method on the EntityManager. Hibernate will then generate and execute the required SQL statement to remove the entity.

Author a = em.find(Author.class, 1L);
em.remove(a);

What’s the difference between persist, save, merge and update? 
.............................................................
JPA and Hibernate provide different methods to persist new and to update existing entities.
You can choose between JPA’s persist and merge and Hibernate’s save and update methods.


Before that just know about the states of Hibernate
....................................................


   States of Entity
   ................
   If an entity is attached to the current persistence context, it has the lifecycle state managed. 
   That means that it is mapped to a database record. Your persistence provider generates the required SQL INSERT
   and UPDATE statements to propagate all changes.
   A managed entity is also stored in the 1st level cache.

   Persistent state
   ..................
   
   When you create a new entity, it’s in the transient state. 
   It remains in this state until you attach it to the current persistence context.
   
   detached state
   ............... 
   Entities in the detached lifecycle state are no longer managed by the persistence context. 
   That can be the case because you closed the persistence context 
   or you explicitly detached the entity from the current context.  

   Removed
   ..........
   These entities were previously in the state managed, before you scheduled them for removal.
   
   
persist or save
................   
   
   When you create a new entity object, it’s in the transient lifecycle state. It does not map any database record.
   Author a = new Author();
   a.setFirstName("Thorben");
   a.setLastName("Janssen");
   
   You can either use JPA’s persist or Hibernate’s save method to make object as managed state
   
   Both methods seem to do the same, but there are a few differences.

   a) Specification vs. Proprietary API
 
     The most obvious difference is that the JPA specification defines the persist method.
     You can use it with all JPA implementations. 
     The save method, on the other hand, is Hibernate-specific. 
     It is, therefore, not available in other JPA implementation   
   
   b) Return Types And Execution Of SQL Statements
   
      Another obvious difference between these 2 methods is their return type. 
      JPA’s persist method returns void and Hibernate’s save method returns the primary key of the entity. 
   
   
 Updating a detached entity
 ..........................
 When you close the current persistence context or explicitly remove an entity from it by calling the clear or
 detach methods on the EntityManager interface, the entity becomes detached. That means that it is no longer 
 stored in the 1st level cache and that Hibernate will not replicate any of the applied changes to the database.
   
 You can use Hibernate’s update or JPA’s merge method to associate a detached entity with a persistence context. 
 
 Both methods seem to do the same, but there are a few differences.
 
 Merge 
 .....
 
 JPA’s merge method copies the state of a detached entity to a managed instance of the same entity. 
 Hibernate, therefore, executes an SQL SELECT statement to retrieve a managed entity from the database. 
 If the persistence context already contained a managed instance of the entity,
 Hibernate uses the existing one instead.
 It then copies all attribute values to the managed entity and returns it to the caller.
   
 When Hibernate flushes the persistence context for the next time, its dirty checking mechanism checks all managed entities. 
 If it detects that the merge operation changed any entity attribute value, 
 it triggers the required SQL UPDATE statement.
 
 There is one important detail you need to know when you use JPA’s merge method. 
 Hibernate copies the attribute values of the detached entity to the managed entity. 
 This overwrites any changes that you performed on this entity within the current Session.
   
 Update
 ......
 
 Hibernate’s update method doesn’t trigger an SQL SELECT statement.
 It just attaches the entity to the current persistence context. 
 In contrast to JPA’s merge method, you can’t lose any changes by calling the update method. 
 If the persistence context already contains a managed instance of the entity you want to update, it throws an exception.
 
 When Hibernate performs the next flush, it doesn’t perform any dirty checks. That’s not possible because Hibernate didn’t read the latest version of the entity from the database. 
 It just executes an SQL UPDATE statement for the reattached entity.
 
 The missing dirty check causes an unnecessary SQL UPDATE 
 statement when the entity and the corresponding database record contain the same values.
 This might be a problem if your DBA registered an update trigger for the database table. 
 In these situations, you can annotate your entity with @SelectBeforeUpdate.
 
 That tells Hibernate to select the entity and perform a dirty check before it generates the SQL UPDATE statement
 
 
 
 Updating a managed entity
 ........................
 
 
 JPA and Hibernate make it very easy to update a managed entity. If your entity is in the lifecycle state managed, e.g. because you fetched it with a JPQL query or the find method of the EntityManager, you just need to change the values of your entity attributes.
 
 m.getTransaction().begin();
 
a = em.find(Author.class, a.getId());
a.setFirstName("Thorben");
 
log.info("Before commit");      
em.getTransaction().commit();
em.close();
 
 When Hibernate decides to flush the persistence context, 
 the dirty checking mechanism will detect the change and perform the required SQL UPDATE statement.
 
 
 
 save vs saveOrUpdate
 ....................
 
 public Serializable save(Object object) throws HibernateException
 public Serializable save(String entityName,Object object) throws HibernateException

 Save() method stores an object into the database. 
 It will Persist the given transient instance, first assigning a generated identifier. 
 It returns the id of the entity created.
SaveOrUpdate() calls either save() or update() on the basis of identifier exists or not.
 e.g if identifier does not exist, save() will be called or else update() will be called.
Probably you will get very few chances to actually 
call save() or saveOrUpdate() methods, as hibernate manages all changes done in persistent objects.


@CreationTimestamp and @UpdateTimestamp
.......................................

Hibernate’s @CreationTimestamp and @UpdateTimestamp annotations make it easy to track the timestamp of the creation and last update of an entity. 
 
 
 
DTO'S Vs Entity
.................. 
Your persistence context manages the entities.That is a great thing when you want to update an entity.
You just need to call a setter method with the new value. 
Hibernate will take care of the required SQL statements and write the changes to the database. 
 
That’s comfortable to use, but you don’t get it for free. 
Hibernate has to perform dirty checks on all managed entities to find out if it needs to store any changes in the database.
That takes time and is completely unnecessary when you just want to send a few information to the client.

You also need to keep in mind that Hibernate and any other JPA implementation, 
stores all managed entities in the 1st level cache. That seems to be a great thing. 
It prevents the execution of duplicate queries and is required for Hibernate’s write behind optimization. 
But managing the 1st level cache takes time and can even become a problem 
if you select hundreds or thousands of entities.

Write Operations
.................

Entity projections are great for all write operations. Hibernate and any other JPA implementation manages 
the state of your entities and creates the required SQL statements to persist your changes in the database. 
That makes the implementation of most create, update and remove operations very easy and efficient.


Read Operations
...............
But read-only operations should be handled differently. 
Hibernate doesn’t need to manage any states or perform dirty checks if you just want to read some data from the database.

So, from a theoretical point of view, DTOs should be the better projection for reading your data. 


JPA FETCH TYPES
...............

The FetchType defines when Hibernate gets the related entities from the database, and it is one of the crucial elements for a fast persistence tier

The default depends on the cardinality of the relationship. 
//////////////////////////////////////////////////////////

All to-one relationships use FetchType.EAGER and all to-many relationships FetchType.LAZY.

@OneToMany(mappedBy = "order", fetch = FetchType.EAGER)
private Set<OrderItem> items = new HashSet<OrderItem>();


Sorting vs Ordering
....................

When use sorting, Hibernate will load the associated Book entities from the database and 
use a Java Comparator to sort them in memory. That is not a good approach for huge Sets of entities.


Ordering uses an ORDER BY clause in the SQL statement to retrieve the entities in the defined order.
Database handles these kinds of operations very efficiently. So this approach is a lot better for huge associations.

You can tell Hibernate to use natural sorting by annotating the association attribute with @SortNatural. 
This approach uses the Comparable implementation of the related entities.


Custom Comparator
When you don’t want to use the Comparable implementation of your entities for your sorting, you can use the 
@SortComparator annotation to provide a custom Comparator

@ManyToMany(mappedBy = "authors")
@SortComparator(SortById.class)
private SortedSet<Book> books = new TreeSet<Book>();

ublic class SortById implements Comparator<Book> {

	Logger log = Logger.getLogger(SortById.class.getSimpleName());
	
	@Override
	public int compare(Book o1, Book o2) {
		log.info("SortById.compare");
		return o1.getId().compareTo(o2.getId());
	}

}
 
You can define the ORDER BY clause with JPA’s @OrderBy annotation. If you don’t provide any additional information, 
Hibernate will order the associated entities by their primary key
 
@ManyToMany(mappedBy = "authors")
@OrderBy("title ASC")
private List<Book> books = new ArrayList<Book>();
 
 
Asscoiations in Hibernate
.........................

JPA and Hibernate support the same associations as you know from your relational database model. You can use:

one-to-one associations,
many-to-one associations and
many-to-many associations.

Class -  OrderItems and Order
 

 Many-to-One Associations
 .........................
  
   Unidirectional Relationship 
   ..............................

   An order consists of multiple items, but each item belongs to only one order.
   @Entity
   public class OrderItem {
 
    @ManyToOne
    private Order order;
 
   }
   
    By default, Hibernate generates the name of the foreign key 
    column based on the name of the relationship mapping attribute and the name of the primary key attribute
 
     If you want to use a different column, you need to define the foreign key column name with a @JoinColumn annotation
     
    @ManyToOne
    @JoinColumn(name = “fk_order”)
    private Order order;

   Order o = em.find(Order.class, 1L);
   OrderItem i = new OrderItem();
   i.setOrder(o); // seting order in prder item
   em.persist(i);

 
 One To Many Association
 ........................
 
 UniDirectional
 ...............
 
 The unidirectional one-to-many relationship mapping is not very common. In the example of this post, it only models the association on the Order entity and not on the OrderItem.
 
 @Entity
 public class Order {
 
    @OneToMany
    private List<OrderItem> items = new ArrayList<OrderItem>();
 
 }
 
 Order o = em.find(Order.class, 1L);
 OrderItem i = new OrderItem();
 o.getItems().add(i);
 em.persist(i);
 
 
Bidirectional Many-to-One Associations
.......................................

The mapping definition consists of 2 parts:

the to-many side of the association which owns the relationship mapping and
the to-one side which just references the mapping
 
 
        OrderItem                                               Order
        ...........                                             .....

    @ManyToOne                                           @OneToMany(mappedBy = “order”)
    @JoinColumn(name = “fk_order”)                       private List<OrderItem> items = new ArrayList<OrderItem>();
    private Order order;
 

   You just need to reference the owning association mapping. You can do that by providing the name of the 
   association-mapping attribute to the mappedBy attribute of the @OneToMany annotation. 



 Many To Many Associations
 .........................

Many-to-Many relationships are another often used association type. On the database level, 
it requires an additional association table which contains the primary key pairs of the associated entities.
But as you will see, you don’t need to map this table to an entity.

A typical example for such a many-to-many association are Products and Stores. 
Each Store sells multiple Products and each Product gets sold in multiple Stores.

When you map a many-to-many association, you should use a 
Set instead of a List as the attribute type. Otherwise, 
Hibernate will take a very inefficient approach to remove entities from the association. 
It will remove all records from the association table and re-insert the remaining ones. 
You can avoid that by using a Set instead of a List as the attribute type.

  Unidirectional
  ..............
  
   @Entity
   public class Store {
 
    @ManyToMany
    private Set<Product> products = new HashSet<Product>();
 
  }  

  You can customize the column names of new table with a @JoinTable annotation and its attributes joinColumns and inverseJoinColumns. 
  The joinColumns attribute defines the foreign key columns for the entity on which you define the association mapping. 
  The inverseJoinColumns attribute specifies the foreign key columns of the associated entity.

    @ManyToMany
    @JoinTable(name = “store_product”,
           joinColumns = { @JoinColumn(name = “fk_store”) },
           inverseJoinColumns = { @JoinColumn(name = “fk_product”) })
    private Set<Product> products = new HashSet<Product>();

  Store s = em.find(Store.class, 1L);
  Product p = new Product();
  s.getProducts().add(p);
  em.persist(p)


 
 Bidirectional
 .............
 
          Store Table
          ...........
          
           @ManyToMany
           @JoinTable(name = “store_product”,
           joinColumns = { @JoinColumn(name = “fk_store”) },
           inverseJoinColumns = { @JoinColumn(name = “fk_product”) })
           private Set<Product> products = new HashSet<Product>();
 
 
          Product Table
          .............
          @ManyToMany(mappedBy=”products”)
          private Set<Store> stores = new HashSet<Store>();
 
 
  One to One Relationship
  .......................
  An example for a one-to-one association could be a Customer and the ShippingAddress. 
  Each Customer has exactly one ShippingAddress and each ShippingAddress belongs to one Customer. 
  
  
  Unidirectional
  ..............
  
  @Entity
  public class Customer{
 
    @OneToOne
    @JoinColumn(name = “fk_shippingaddress”)
    private ShippingAddress shippingAddress;
 
  }  
 
   Bidirectional
   .............
   
     Cutomer                                                      Shipping address
     .......                                           ..............................
    @OneToOne                                         @OneToOne(mappedBy = “shippingAddress”)
    @JoinColumn(name = “fk_shippingaddress”)          private Customer customer;
    private ShippingAddress shippingAddress;

Cascade
.......

Cascade attribute is mandatory, when ever we apply relationship between objects, 
cascade attribute transfers operations done on one object onto its related child objects

Cascade having the values ->none,save,update,save-update,delete,all,all-delete-orphan

1) default value of cascade =”none” means no operations will be transfers to the child class
2) if we write cascade = “all” then all operations like insert, delete, update at parent object will be effected to child object also
3) all-delete-orphan means, breaking relation between objects not deleting the objects from the database,
4) 

   


Load vs Get in session
......................

load
....

It will always return a “proxy” (Hibernate term) without hitting the database. 
In Hibernate, proxy is an object with the given identifier value, 
its properties are not initialized yet, it just look like a temporary fake object.
If no row found , it will throws an ObjectNotFoundException.

Stock stock = (Stock)session.load(Stock.class, new Integer(100)); //proxy

 //initialize proxy, no row for id 100, throw ObjectNotFoundException
System.out.println(stock.getStockCode());

get
...
It always hit the database and return the real object, an object that represent the database row, not proxy.
If no row found , it return null.
ex:- Stock stock = (Stock)session.get(Stock.class, new Integer(2));






Hibernate Caching
.................

The first level cache type is the session cache. The session cache caches object within the current session but this is not enough for long level i.e. session factory scope.


Enabling and Disabling the second level cache
............................................
SessionFactory 

Enabling
........
<property name="cache.use_second_level_cache">true</property>
   <property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property> 

<!-- Disable the second-level cache -->  
<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property> 




Queries
.......

Queries are represented in JPA 2 by two interfaces - 
the old Query interface, which was the only interface available for representing queries in JPA 1, and the new TypedQuery interface that was introduced in JPA 2. 
The TypedQuery interface extends the Query interface.


Query q1 = em.createQuery("SELECT c FROM Country c");

  TypedQuery<Country> q2 =
      em.createQuery("SELECT c FROM Country c", Country.class);
   
 When building a TypedQuery instance the expected result type has to be passed as an additional argument, as demonstrated for q2. Because, in this case, the result type is known (the query returns only Country objects), a TypedQuery is preferred.
 
 
Named Queries
.............

TypedQuery<Country> query = em.createQuery(
        "SELECT c FROM Country c WHERE c.name = :name", Country.class);
 query.setParameter("name", name).getSingleResult();
 
 
Ordinal Parameters
.................. 

TypedQuery<Country> query = em.createQuery(
        "SELECT c FROM Country c WHERE c.name = ?1", Country.class);
query.setParameter(1, name).getSingleResult();    

Parameters
..........

public Country getCountryByName(EntityManager em, String name) {
    TypedQuery<Country> query = em.createQuery(
        "SELECT c FROM Country c WHERE c.name = '" + name + "'",
        Country.class);
    return query.getSingleResult();
} 
  
      
Criterial API
.............

A major advantage of using the criteria API is that errors can be detected earlier, 
during compilation rather than at runtime. On the other hand, 
for many developers string based JPQL queries, which are very similar to SQL queries, are easier to use and understand.

For simple static queries - string based JPQL queries (e.g. as named queries) may be preferred. 
For dynamic queries that are built at runtime - the criteria API may be preferred.



Let’s look at a simple criteria query which will retrieve all the rows of “ITEM” from the database:

CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Item> cr = cb.createQuery(Item.class);
Root<Item> root = cr.from(Item.class);
cr.select(root);
 
Query<Item> query = session.createQuery(cr);
List<Item> results = query.getResultList();    

 
The CriteriaBuilder can be used to restrict query results based on specific conditions

To get items having a price more than 1000:

cr.select(root).where(cb.gt(root.get("itemPrice"), 1000)); 
      
items having itemNames contain Chair:
 
cr.select(root).where(cb.like(root.get("itemName"), "%chair%"));
 
Now inevitably the question comes, whether we can combine two or more of the above comparisons or not. 
The answer is, of course, yes – the Criteria API allows us to easily chain expressions 
 
Predicate[] predicates = new Predicate[2];
predicates[0] = cb.isNull(root.get("itemDescription"));
predicates[1] = cb.like(root.get("itemName"), "chair%");
cr.select(root).where(predicates);


Projections
...........

Typically, a JPQL query has a candidate entity class. The query, on execution, creates objects of the candidate class — populating all their properties using the data retrieved.

But, it’s possible to retrieve a subset of the properties of the entity, or, that is, a projection of column data.

Apart from column data, we can also project the results of grouping functions.

Single-Column Projections
........................

Query query = entityManager.createQuery("select name from Product");
List<Object> resultList = query.getResultList();
Or, we can do the same with CriteriaBuilder:

CriteriaBuilder builder = entityManager.getCriteriaBuilder();
CriteriaQuery<String> query = builder.createQuery(String.class);
Root<Product> product = query.from(Product.class);

//single column
query.select(product.get("name"));

//multicolumn
query.multiselect(product.get("id"), product.get("name"), product.get("unitPrice"));

List<String> resultList = entityManager.createQuery(query).getResultList();


or
Criteria crit = session.createCriteria(Products.class);

Projection p1 = Projection.property("proName");
Projection p2 = Projection.property("price");

crit.setProjection(p1):
crit.setProjection(p2):
List l=crit.list();


CriteriaUpdate
..............
Starting from JPA 2.1, there’s support for performing database updates using the Criteria API.
CriteriaUpdate has a set() method that can used to provide new values for database records
CriteriaUpdate<Item> criteriaUpdate = cb.createCriteriaUpdate(Item.class);
Root<Item> root = criteriaUpdate.from(Item.class);
criteriaUpdate.set("itemPrice", newPrice);
criteriaUpdate.where(cb.equal(root.get("itemPrice"), oldPrice));
 
Transaction transaction = session.beginTransaction();
session.createQuery(criteriaUpdate).executeUpdate();
transaction.commit();

CriteriaDelete
...............
CriteriaDelete<Item> criteriaDelete = cb.createCriteriaDelete(Item.class);
Root<Item> root = criteriaDelete.from(Item.class);
criteriaDelete.where(cb.greaterThan(root.get("itemPrice"), targetPrice));
 
Transaction transaction = session.beginTransaction();
session.createQuery(criteriaDelete).executeUpdate();
transaction.commit();


Hibernate Auditing
..................


























 
      
      

















































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
  






















































   
   
   
   
   