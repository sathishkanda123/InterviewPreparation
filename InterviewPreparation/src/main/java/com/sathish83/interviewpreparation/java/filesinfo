OutputStream
............
Java application uses an output stream to write data to a destination
OutputStream class is an abstract class. It is the superclass of all classes representing an output stream of bytes. 
An output stream accepts output bytes and sends them to some sink.

Methods
........
1) public void write(int)throws IOException	is used to write a byte to the current output stream.
2) public void write(byte[])throws IOException	is used to write an array of byte to the current output stream.
3) public void flush()throws IOException	flushes the current output stream.
4) public void close()throws IOException	is used to close the current output stream.


OutPutStream
.............

 1) FileOutPutStream
 2) ByteArrayOutPutStream
 3) FilterOutPutStream
    a) DataOutPutStream
    b) BufferedOutPutStream
    c) PrintStream
 4) PipedOutStream
 5) ObjectOutPutStream   


InputStream
...........
Java application uses an input stream to read data from a source
InputStream class is an abstract class. It is the superclass of all classes representing an input stream of bytes.

Methods
.......

1) public abstract int read()throws IOException	reads the next byte of data from the input stream. It returns -1 at the end of the file.
2) public int available()throws IOException	returns an estimate of the number of bytes that can be read from the current input stream.
3) public void close()throws IOException	is used to close the current input stream.

 1) FileInputPutStream
 2) ByteArrayInputPutStream
 3) FilterInputPutStream
    a) DataInputPutStream
    b) BufferedInputPutStream
    c) PrintStream
 4) PipedInputStream
 5) ObjectInputStream   
 
 
 ....................................................................................................................
 
 FileOutStream
 .............

If you have to write primitive values into a file, use FileOutputStream class. 
You can write byte-oriented as well as character-oriented data through FileOutputStream class. 
But, for character-oriented data, it is preferred to use FileWriter than FileOutputStream.



ByteArrayOutPutStream
.....................

Java ByteArrayOutputStream class is used to write common data into multiple files. 
In this stream, the data is written into a byte array which can be written to multiple streams later.
The ByteArrayOutputStream holds a copy of data and forwards it to multiple streams.
The buffer of ByteArrayOutputStream automatically grows according to data.


Java FilePermission
..................
Java.io.FilePermission class:

public final class FilePermission extends Permission implements Serializable 

FilePermission file1 = new FilePermission("D:\\IO Package\\-", "read");  
PermissionCollection permission = file1.newPermissionCollection();  
permission.add(file1);  




Java Writer and Reader
.......................

Writer
......

It is an abstract class for writing to character streams. The methods that a subclass must implement are write(char[], int, int), flush(), and close()

Reader
.......

Java Reader is an abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some of the methods to provide higher efficiency, additional functionality, or both.
Some of the implementation class are BufferedReader, CharArrayReader, FilterReader, InputStreamReader, PipedReader, StringReader


BufferedReader
..............
Java BufferedReader class is used to read the text from a character-based input stream.
 It can be used to read data line by line by readLine() method. 
It makes the performance fast. It inherits Reader class.


DataOutputStream
..................
Java DataOutputStream class allows an application to write primitive Java data types to the output stream in a machine-independent way.
FileOutputStream file = new FileOutputStream(D:\\testout.txt);  
DataOutputStream data = new DataOutputStream(file);  
data.writeInt(65);  

DataInputStream
.................
Java DataInputStream class allows an application to read primitive data from the input stream in a machine-independent way.

Java application generally uses the data output stream to write data that can later be read by a data input stream.
InputStream input = new FileInputStream("D:\\testout.txt");  
    DataInputStream inst = new DataInputStream(input);  
    int count = input.available();  
    byte[] ary = new byte[count];  
    inst.read(ary); 























 






