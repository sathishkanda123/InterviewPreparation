https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0

How Java script works
.....................


What is Javascript Engine
.........................
JavaScript engines are programs that convert JavaScript code into lower level or machine code.
Most popular ones are V8 (Chrome), 
JavaScriptCore marketed as Nitro (Safari), 
SpiderMonkey (Firefox) and Chakra (IE, Edge).

V8 -Engine
..........
 The V8 engine is used inside Chrome and Node.js 

The Engine consists of two main components:

Memory Heap — this is where the memory allocation happens
Call Stack — this is where your stack frames are as your code executes 


Inside the engine the first step is to parse the code by a parser,
it will read the code line by line and will check that the syntax is correct.
The parser will know rules for JS to ensure this. 
If it finds any mistakes it will throw an error and execution will stop.
If everything is correct the parser will produce a data structure 
which is called Abstract Syntax Tree and that is then turned into machine code, machine code is executed directly by the computer’s processor and that is where our code runs. 

V8 used to have two compilers
............................
Before version 5.9 of V8 came out (released earlier this year), the engine used two compilers:
full-codegen — a simple and very fast compiler that produced simple and relatively slow machine code.
Crankshaft — a more complex (Just-In-Time) optimizing compiler that produced highly-optimized code.

Garbage collection
For garbage collection, V8 uses a traditional generational approach of mark-and-sweep to clean the old generation


The Runtime
............
There are APIs in the browser that have been used by almost any JavaScript developer out there (e.g. “setTimeout”). 
Those APIs, however, are not provided by the Engine.
we have the Engine but there is actually a lot more. 
We have those things called Web APIs which are provided by browsers, like the DOM, AJAX, setTimeout and much more.
And then, we have the so popular event loop and the callback queue.

The Call Stack
..............

JavaScript is a single-threaded programming language, which means it has a single Call Stack. 
Therefore it can do one thing at a time.

The Call Stack is a data structure which records basically where in the program we are. 
If we step into a function, we put it on the top of the stack. 
If we return from a function, we pop off the top of the stack. That’s all the stack can do.

Each entry in the Call Stack is called a Stack Frame.

At some point, however, the number of function calls 
in the Call Stack exceeds the actual size of the Call Stack, 
and the browser decides to take action, by throwing an error, 
which can look something like this:

So, how can we execute heavy code without blocking the UI and making the browser unresponsive? 
Well, the solution is asynchronous callbacks.



Execution Context
.................

 execution context is an abstract concept of an environment
 where the Javascript code is evaluated and executed. 
 
 Three execution context
 ......................
 1) Global Execution Context   ---
    This is the default or base execution context. The code that is not inside any function is in the global execution context. It performs two things: it creates a global object which is a window object (in the case of browsers) and sets the value of this to equal to the global object. 
     There can only be one global execution context in a program.
 
 2) Functional Execution Context  --- 
    Every time a function is invoked, a brand new execution context is created for that function. Each function has its own execution context, but it’s created when the function is invoked or called. 
    There can be any number of function execution contexts. Whenever a new execution context is created,
 
 3) Eval Function Execution Context --
    Code executed inside an eval function also gets its own execution context, but as eval 
    
 
Execution stack
...............

Execution stack, also known as “calling stack” in other programming languages, is a stack with a LIFO (Last in, First out) structure, 
which is used to store all the execution context created during the code execution.    

The execution context is created in two phases: 1) Creation Phase and 2) Execution Phase.

The Creation Phase
...................

The execution context is created during the creation phase. 

1) LexicalEnvironment component is created.
2) VariableEnvironment component is created.

How Does the Browser Know What to Cache?
........................................
The browser inspects the headers of the HTTP response generated by the web server.
There are four headers commonly used for caching:
 ETag
 Cache-Control
 Expires
 Last-Modified
 
Cache-Control
The Cache-Control header has a number of directives we can set to control cache behavior, expiration, and validation

Cache-Control: no-store - This tells the browser to always request the resource from the server
Cache-Control: private - private means that the resource can only be cached by the browser
Cache-Control: public - public means that the resource can be cached by any cache (browser, CDN, etc)
Cache-Control: no-cache - This tells the browser to cache the file but not to use it until it checks with the server to validate we have the latest version. This validation is done with the ETag header.


Cache Busting
.............
Cache busting is where we invalidate a cached file and force the browser to retrieve the file from the server.
We can instruct the browser to bypass the cache by simply changing the filename. To the browser, 
this is a completely new resource so it will fetch the resource from the server.

https://codeburst.io/javascript-wtf-is-es6-es8-es-2017-ecmascript-dca859e4821c
Java Script Versions
....................

JavaScript was originally named JavaScript in hopes of capitalizing on the success of Java.

Netscape then submitted JavaScript to ECMA International for Standardization.
(ECMA is an organization that standardizes information)
Ecma International is an industry association founded in 1961, 
dedicated to the standardization of information and communication systems.

This results in a new language standard, known as ECMAScript.

Put simply, ECMAScript is a standard. While JavaScript is the most popular implementation of that standard. 
JavaScript implements ECMAScript and builds on top of it.

ECMAScript is a standard. 
JavaScript is the most popular implementation of that standard. Other implementations 
include: SpiderMonkey, V8, and ActionScript.

ES is simply short for ECMAScript. Every time you see ES followed by a number, it is referencing an edition of ECMAScript

ES5 - 2009

ES6 / ES2015 - June 2015
ES6 and ES2015 are the same thing.
ECMAScript specifications made the decision to move to annual updates. With this change, 
the edition was renamed to ES 2015 to reflect the year of release. 

// in test.js file specifed te features and examples
ES2016 (ES7) - June 2016
............

ES2017 (ES8) - June  - 2017
............


Questions for Interview
.......................

1) What is Destructing in java script
   ..................................
   Destructuring simply implies breaking down a complex structure into simpler parts
   Destructuring syntax can be used for variable declaration or variable assignment.
   Object Destructuring
   ....................
   const student = {
    firstname: 'Glad',
    lastname: 'Chinda',
    country: 'Nigeria'
  };

  // Object Destructuring 
  const { firstname, lastname, country } = student;

  console.log(firstname, lastname, country); // Glad Chinda Nigeria
   
2) What is call,apply and bind methods
   You can use call()/apply() to invoke the function immediately
   
   The call() method takes arguments separately.

   The apply() method takes arguments as an array.


var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

person.fullName.apply(person1, ["Oslo", "Norway"]);
person.fullName.call(person1, "Oslo", "Norway");


3) what is closure in java script
   A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a
   closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.
   To use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.
  
4) What is prototypes in Javascript
   All JavaScript objects inherit properties and methods from a prototype:
   The Object.prototype is on the top of the prototype inheritance chain:
   Sometimes you want to add new properties (or methods) to all existing objects of a given type.
   Sometimes you want to add new properties (or methods) to an object constructor.
   // how it  works
    When we try to access a property of an object, JavaScript engines first tries to find the property on the object,
    if the property is present on the object it outputs its value. But, if the property is not present on the object 
    then it tries to find the property on the prototype object or dunder proto of the object. 
    If the property is found the value is returned else JavaScript engine tries to find the property on the dunder proto of the object. 
    This chain continues until the dunder proto property is null. In these cases, the output will be undefined.
   
5) what are the ways to create a object in javascript
   a) using literal 
      var a ={
         a:10,
         b:"sathish"
        }
   b) using new Object syntax
      var human = new Object()
      console.log(human);// Creates an empty object
   
   c) Object Constructor same as java class
      function construFun(){
      
      }
      var ob= new constructFun();
   d) Object.create method Object.create(prototype_object, propertiesObject)  
      prototypeObject: Newly created objects prototype object. It has to be an object or null.
      propertiesObject: Properties of the new object. This argument is optional 
           propertiesObject is used to create properties on new object. 
           It acts as a descriptor for the new properties to be defined. Descriptors can be data descriptor or access descriptors.
           Data descriptors are
           configurable
           enumerable
           value
           writable
           Access descriptors are
           get
           set  
      
6) What is inheritence in javascrpt
    uses the concept of prototypes and prototype chaining for inheritance.
    Prototype chaining means an object’s dunder proto or proto property will point to another object instead of pointing to the constructor function prototype. 
    If the other object’s dunder proto or proto property points to another object it will result in the chain. This is called Prototype Chaining.
    
7) what are the different ways to call asynchrouous
    
   a) callbacks
      .........
      A callback is a function that is passed to another function. 
      When the first function is done, it will run the second function.       
      
      The problem with callbacks is it creates something called “Callback Hell.” 
      Basically, you start nesting functions within functions within functions,
      and it starts to get really hard to read the code.
      
   b) Promises
   c) Async and Await
      Async functions enable us to write promise based code as if it were synchronous, but without blocking the execution thread
      The await operator is used to wait for a Promise. It can be used inside an Async block only
         
        
      
      
     
    
      
   
























