Lifecycle Hooks
A component has a lifecycle managed by Angular.

After creating a component/directive by calling its constructor, Angular calls the lifecycle hook methods in the following sequence at specific moments:


ngOnChanges()	 - Respond when Angular (re)sets data-bound input properties. 
                   The method receives a SimpleChanges object of current and previous property values.
                   Called before ngOnInit() and whenever one or more data-bound input properties change.
 
 
ngOnInit()      - Initialize the directive/component after Angular first displays the data-bound properties and sets the directive/component's input properties.
                   Called once, after the first ngOnChanges(). 


ngDoCheck()    - Detect and act upon changes that Angular can't or won't detect on its own.
                 Called during every change detection run, immediately after ngOnChanges() and ngOnInit().                   


ngAfterContentInit() - Respond after Angular projects external content into the component's view / the view that a directive is in.
                        Called once after the first ngDoCheck().

                   
ngAfterContentChecked() - Respond after Angular checks the content projected into the directive/component.


ngAfterViewInit() - Respond after Angular initializes the component's views and child views / the view that a directive is in.


ngAfterViewChecked() - Respond after Angular checks the component's views and child views / the view that a directive is in.


ngOnDestroy() - Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.


Asynchronous
............
There are different ways in JavaScript to create asynchronous code. The most important ones are the following:
Callbacks
Promises
Async/Await
RxJS Observables


Pipes
.....
A pipe takes in data as input and transforms it to a desired output. 

Built-in pipes
Angular comes with a stock of pipes such as DatePipe, UpperCasePipe, 
LowerCasePipe, CurrencyPipe, and PercentPipe. They are all available for use in any template.

Custom Pipes
............
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'exponentialStrength'})
export class ExponentialStrengthPipe implements PipeTransform {
  transform(value: number, exponent?: number): number {
    return Math.pow(value, isNaN(exponent) ? 1 : exponent);
  }
}

<p>Super power boost: {{2 | exponentialStrength: 10}}</p>


Directives
..........

An Attribute directive changes the appearance or behavior of a DOM element.

import { Directive } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
   
   constructor(el: ElementRef) {
       el.nativeElement.style.backgroundColor = 'yellow';
    }
}

<p appHighlight>Highlight me!</p>














What is BehaviorSubject, ReplaySubject and AsyncSubject.
......................................................


Behaviour Subject ->
....................
 Behaviour subject has the charctersitic that it stores the current value , this means you can always 
directly get the last emited value from the behaviour subject


import * as Rx from "rxjs";

const subject = new Rx.BehaviorSubject();

subject.next(Math.random());

subject.subscribe((data) => {
    console.log('Subscriber A:', data);
});

ReplaySubject ->
................
   The ReplaySubject is comparable to the BehaviorSubject in the way that it can send “old” 
values to new subscribers. It however has the extra characteristic that it can record a part of the observable
execution and therefore store multiple old values and “replay” them to new subscribers.


const subject = new Rx.ReplaySubject(2); // 2 - how man values i have to store

subject.subscribe((data) => {
    console.log('Subscriber A:', data);
});

subject.next(Math.random())

AsyncSubject
............
The AsyncSubject is aSubject variant where only the last value of the Observable execution is sent to its subscribers, and only when the execution completes


const subject = new Rx.AsyncSubject();

// subscriber 1
subject.subscribe((data) => {
    console.log('Subscriber A:', data);
});

subject.next(Math.random())













 
.................


                   
                   
                   